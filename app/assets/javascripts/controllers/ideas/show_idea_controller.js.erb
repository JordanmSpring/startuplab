angular.module('StartupLab')
.controller('ShowIdeaController', ['$scope', '$routeParams', '$location', 'Idea', 'Session', 'user',
    function($scope, $routeParams, $location, Idea, Session, user) {

  $scope.session = Session;

  // TODO: Use a resolver in the routes
  Idea.provider().find($routeParams.id).then(function(response) {
    $scope.idea = response.data;

    if ($routeParams['vote'] && $scope.session.isAuthenticated() && Idea.provider().canVote) {
      $scope.vote()
      // Remove the 'vote' and 'origin' params after login.
      $location.url('/ideas/' + $scope.idea.id);
    }
  });

  /* Init isotope */
  $('.grid').isotope({
    itemSelector: '.grid-item',
    layoutMode: 'masonry',
    masonry: {
      // use outer width of grid-sizer for columnWidth
      columnWidth: 190,
      isFitWidth: true
    },
    sortBy: 'original-order'
  });

  var publish = function() {
    // Don't publish if the current idea provider does not allow
    if (!Idea.provider().canPublish) {
      return;
    }

    // Force the user to upgrade if they don't have the ability to publish.
    if (Session.currentUser().plan.canPublishIdeas == false) {
      $location.path('/upgrade/publish');
      return;
    }

    if (confirm('Are you sure you want to make this idea public?')) {
      Idea.provider().publish($scope.idea).then(function() {
        $scope.idea.published = true;
      }, function() {
        alert('Sorry, the idea could not be published. If this problem continues, contact support.');
      });
    }
  };

  var unpublish = function() {
    // Don't publish if the current idea provider does not allow
    if (!Idea.provider().canPublish) {
      return;
    }

    if (confirm('Are you sure you want to make this idea private?')) {
      Idea.provider().unpublish($scope.idea).then(function() {
        $scope.idea.published = false;
      }, function() {
        alert('Sorry, this idea could not be made private. If this problem continues, contact support.');
      });
    }
  };

  $scope.canVote = function() {
    return Idea.provider().canVote;
  };

  $scope.canComment = function() {
    return Idea.provider().canComment;
  };

  $scope.vote = function() {
    // Prevent ineligible voting
    if (!Idea.provider().canVote) {
      return;
    }

    Idea.provider().vote($scope.idea).then(function(response) {
      $scope.idea.voted = true;
      $scope.idea.votes = response.data;
    }, function() {
      alert('Sorry, you could not vote for this idea. If this problem continues, contact support.');
    });
  };

  $scope.unvote = function() {
    // Prevent ineligible voting
    if (!Idea.provider().canVote) {
      return;
    }

    Idea.provider().unvote($scope.idea).then(function(response) {
      $scope.idea.voted = false;
      $scope.idea.votes = response.data;
    }, function() {
      alert('Sorry, you could remove your vote for this idea. If this problem continues, contact support.');
    });
  };

  $scope.delete = function() {
    if (confirm('Are you sure you want to delete this idea?')) {
      Idea.provider().delete($scope.idea).then(function() {
      // We need to refresh the user to see if they have reached any limits.
        Session.refreshCurrentUser();
        $location.path('/dashboard');
      }, function() {
        alert('Sorry, this idea could not be deleted. If this problem continues, contact support.');
      });
    }
  };

  var togglePublicState = function(newVal, oldVal) {
    // Prevent ineligible publishing
    if (!Idea.provider().canPublish) {
      return;
    }

    if (newVal == true && oldVal == false) {
      publish();
    } else if (newVal == false && oldVal == true) {
      unpublish();
    }
  }
  $scope.$watch('idea.published', togglePublicState);
}]);
