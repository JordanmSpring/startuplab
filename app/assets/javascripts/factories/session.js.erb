angular.module('StartupLab').factory('Session', [ '$location', '$http', '$q', '$window', 
    function($location, $http, $q, $window) {

  // Redirect to the given url (defaults to '/')
  function redirect(url) {
    url = url || '/';
    $location.path(url);
  }

  var session = {
    isAuthenticated: function() {
      sStore = $window.sessionStorage.currentUser;
      if (!sStore) return false;
      obj = JSON.parse(sStore);
      return !!obj && !!obj.id;
    },

    unsetCurrentUser: function() {
      $window.sessionStorage.removeItem('currentUser');
    },

    setCurrentUser: function(user) {
      $window.sessionStorage.setItem('currentUser', JSON.stringify(user));
    },

    currentUser: function() {
      if (this.isAuthenticated()) {
        return JSON.parse(window.sessionStorage.currentUser);
      } else {
        return null;
      }
    },

    login: function(email, password, failure) {
       return $http.post('/users/sign_in', {user: {email: email, password: password} })
      .then(function(response) {
        session.setCurrentUser(response.data.user);
        if (session.isAuthenticated()) {
          redirect('/');
        }
      }, function(error) {
        failure();
      });
    },

    logout: function(redirectTo) {
      $http.delete('/users/sign_out').then(function() {
        session.unsetCurrentUser();
        redirect(redirectTo);
      }, function() {
        alert('Could not log out');
      });
    },

    register: function(user) {
      return $http.post('/users.json', {
        user: {
          name: user.name,
          email: user.email,
          password: user.password,
          password_confirmation: user.passwordConfirmation
        }
      }).then(function(response) {
        session.setCurrentUser(response.data);
        if (session.isAuthenticated()) {
          $location.path('/');
        }
      }, function(response) {
        alert(response.data.errors);
      });
    },

    // TODO: Use the User service
    requestCurrentUser: function() {
      var deferred = $q.defer();
      if (session.isAuthenticated()) {
        deferred.resolve();
      } else {
        $http.get('/api/users/current.json').then(function(response) {
          session.setCurrentUser(response.data);
          deferred.resolve();
        }, function() {
          console.log('Unable to get user')
          deferred.reject();
        });
      }
      return deferred.promise;
    }
  };

  return session;
}]);
